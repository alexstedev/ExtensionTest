/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    /** Root View */
    get: operations["root_view__get"];
  };
  "/ping": {
    /** Ping View */
    get: operations["ping_view_ping_get"];
  };
  "/do-not-try": {
    /** Do Not Try View */
    get: operations["do_not_try_view_do_not_try_get"];
  };
  "/time": {
    /** Get Time */
    get: operations["get_time_time_get"];
  };
  "/auth/login": {
    /**
     * Request Authentication Token
     * @description **Request an authentication token to be used in authenticated routes.**
     *
     * Httpie example:
     *
     * ```
     * http --form $ADDR/auth/login username=user@example.com password=mysecret
     * ```
     *
     * Under [`/docs`](/docs) you can also get the token clicking on the lock sign.
     *
     * You can set the returned token to an environment variable with `jq`:
     *
     * ```
     * export TOKEN=$(http --form $ADDR/auth/login username=user@example.com password=mysecret | jq -r .access_token)
     * ```
     *
     * After getting the token, you should use Bearer Token authentication.
     *
     * Httpie example:
     *
     * ```
     * http -A bearer -a $TOKEN $ADDR/my/profile
     * ```
     *
     * The token will expire after some hours.
     *
     * Note: While API is in dev, only admins and allowed users can log in.
     */
    post: operations["Request_authentication_token_auth_login_post"];
  };
  "/auth/logout": {
    /**
     * Discard Authentication Token
     * @description **Discard an authentication token.**
     *
     * Httpie example: `http -A bearer -a $TOKEN POST $ADDR/auth/logout`
     */
    post: operations["Discard_authentication_token_auth_logout_post"];
  };
  "/tables": {
    /**
     * Get All Compilers, Countries, Drivers, Languages, Proglangs, Timezones, Translations And Verdicts
     * @description _viewProvides access to compilers, countries, drivers, languages, proglangs, timezones, translations and verdicts in a single request. This data does not change often, so you should only request it once per session.
     */
    get: operations["Get_all_compilers__countries__drivers__languages__proglangs__timezones__translations_and_verdicts_tables_get"];
  };
  "/tables/countries": {
    /** Get All Countries */
    get: operations["Get_all_countries_tables_countries_get"];
  };
  "/tables/countries/{country_id}": {
    /** Get Details Of A Country */
    get: operations["Get_details_of_a_country_tables_countries__country_id__get"];
  };
  "/tables/compilers": {
    /** Get All Compilers */
    get: operations["Get_all_compilers_tables_compilers_get"];
  };
  "/tables/compilers/{compiler_id}": {
    /** Get Details Of A Compiler */
    get: operations["Get_details_of_a_compiler_tables_compilers__compiler_id__get"];
  };
  "/tables/drivers": {
    /** Get All Drivers */
    get: operations["Get_all_drivers_tables_drivers_get"];
  };
  "/tables/drivers/{driver_id}": {
    /** Get Details Of A Driver */
    get: operations["Get_details_of_a_driver_tables_drivers__driver_id__get"];
  };
  "/tables/languages": {
    /** Get All Languages */
    get: operations["Get_all_languages_tables_languages_get"];
  };
  "/tables/languages/{language_id}": {
    /** Get Details Of A Language */
    get: operations["Get_details_of_a_language_tables_languages__language_id__get"];
  };
  "/tables/proglangs": {
    /** Get All Proglangs */
    get: operations["Get_all_proglangs_tables_proglangs_get"];
  };
  "/tables/timezones": {
    /** Get All Timezones */
    get: operations["Get_all_timezones_tables_timezones_get"];
  };
  "/tables/timezones/{timezone_id}": {
    /** Get Details Of A Timezone */
    get: operations["Get_details_of_a_timezone_tables_timezones__timezone_id__get"];
  };
  "/tables/translations": {
    /** Get All Translations */
    get: operations["Get_all_translations_tables_translations_get"];
  };
  "/tables/translations/{translation_id}": {
    /** Get Details Of A Translation */
    get: operations["Get_details_of_a_translation_tables_translations__translation_id__get"];
  };
  "/tables/verdicts": {
    /** Get All Verdicts */
    get: operations["Get_all_verdicts_tables_verdicts_get"];
  };
  "/tables/verdicts/{verdict_id}": {
    /** Get Details Of A Verdict */
    get: operations["Get_details_of_a_verdict_tables_verdicts__verdict_id__get"];
  };
  "/statistics/home": {
    /** Statistics Home View */
    get: operations["statistics_home_view_statistics_home_get"];
  };
  "/my/profile": {
    /** Profile View */
    get: operations["profile_view_my_profile_get"];
  };
  "/my/profile/avatar": {
    /** Avatar View */
    get: operations["avatar_view_my_profile_avatar_get"];
  };
  "/my/profile/dashboard": {
    /** Dashboard View */
    get: operations["dashboard_view_my_profile_dashboard_get"];
  };
  "/my/profile/statistics": {
    /** Statistics View Tbd */
    get: operations["statistics_view_TBD_my_profile_statistics_get"];
  };
  "/my/profile/all-submissions": {
    /** All Submissions View Tbd */
    get: operations["all_submissions_view_TBD_my_profile_all_submissions_get"];
  };
  "/my/courses/": {
    /** Courses Index View */
    get: operations["courses_index_view_my_courses__get"];
  };
  "/my/courses/available": {
    /** Courses Available Index View */
    get: operations["courses_available_index_view_my_courses_available_get"];
  };
  "/my/courses/available/{username}:{course_nm}": {
    /** Courses Available Detail View */
    get: operations["courses_available_detail_view_my_courses_available__username___course_nm__get"];
  };
  "/my/courses/available/{username}:{course_nm}/enroll": {
    /** Courses Available Enroll View */
    post: operations["courses_available_enroll_view_my_courses_available__username___course_nm__enroll_post"];
  };
  "/my/courses/enrolled": {
    /** Courses Enrolled Index View */
    get: operations["courses_enrolled_index_view_my_courses_enrolled_get"];
  };
  "/my/courses/enrolled/{username}:{course_nm}": {
    /** Courses Enrolled Detail View */
    get: operations["courses_enrolled_detail_view_my_courses_enrolled__username___course_nm__get"];
  };
  "/my/courses/enrolled/{username}:{course_nm}/unenroll": {
    /** Courses Enrolled Unenroll View */
    post: operations["courses_enrolled_unenroll_view_my_courses_enrolled__username___course_nm__unenroll_post"];
  };
  "/my/lists": {
    /** Lists Index View */
    get: operations["lists_index_view_my_lists_get"];
  };
  "/my/lists/{username}:{list_nm}": {
    /** Lists Detail View */
    get: operations["lists_detail_view_my_lists__username___list_nm__get"];
  };
  "/my/problems": {
    /**
     * Absproblems Index View
     * @description Returns dictionary of all accessible abstract problems with their problems.
     */
    get: operations["absproblems_index_view_my_problems_get"];
  };
  "/my/problems/{problem_nm}": {
    /**
     * Absproblems Detail View
     * @description Returns requested abstract problems with its problems and owner.
     */
    get: operations["absproblems_detail_view_my_problems__problem_nm__get"];
  };
  "/my/problems/{problem_nm}/extras": {
    /**
     * Absproblems Extras View
     * @description Returns extra information for the abstract problem
     */
    get: operations["absproblems_extras_view_my_problems__problem_nm__extras_get"];
  };
  "/my/problems/{problem_nm}/{problem_id}": {
    /**
     * Problems Detail View
     * @description Returns requested problem with its abstract problem.
     */
    get: operations["problems_detail_view_my_problems__problem_nm___problem_id__get"];
  };
  "/my/problems/{problem_nm}/{problem_id}/testcases/sample": {
    /** Problems Testcases Sample View */
    get: operations["problems_testcases_sample_view_my_problems__problem_nm___problem_id__testcases_sample_get"];
  };
  "/my/problems/{problem_nm}/{problem_id}/testcases/public": {
    /** Problems Testcases Public View */
    get: operations["problems_testcases_public_view_my_problems__problem_nm___problem_id__testcases_public_get"];
  };
  "/my/problems/{problem_nm}/{problem_id}/extras": {
    /** Problems Extras View */
    get: operations["problems_extras_view_my_problems__problem_nm___problem_id__extras_get"];
  };
  "/my/problems/{problem_nm}/{problem_id}/solutions": {
    /**
     * Problems Solutions View
     * @description Solutions can only be accessed by admins
     */
    get: operations["problems_solutions_view_my_problems__problem_nm___problem_id__solutions_get"];
  };
  "/my/problems/{problem_nm}/{problem_id}/solutions/{prolang}": {
    /**
     * Problems Solutions Detail View
     * @description Solutions can only be accessed by admins
     */
    get: operations["problems_solutions_detail_view_my_problems__problem_nm___problem_id__solutions__prolang__get"];
  };
  "/my/problems/{problem_nm}/{problem_id}/html": {
    /**
     * Problems Html View
     * @description Returns HTLM statement of the requested problem
     */
    get: operations["problems_html_view_my_problems__problem_nm___problem_id__html_get"];
  };
  "/my/problems/{problem_nm}/{problem_id}/text": {
    /**
     * Problems Text View
     * @description Returns TXT statement of the requested problem
     */
    get: operations["problems_text_view_my_problems__problem_nm___problem_id__text_get"];
  };
  "/my/problems/{problem_nm}/{problem_id}/markdown": {
    /**
     * Problems Markdown View
     * @description Returns MD statement of the requested problem
     */
    get: operations["problems_markdown_view_my_problems__problem_nm___problem_id__markdown_get"];
  };
  "/my/problems/{problem_nm}/{problem_id}/pdf": {
    /**
     * Problems Pdf View
     * @description Returns PDF statement of the requested problem
     */
    get: operations["problems_pdf_view_my_problems__problem_nm___problem_id__pdf_get"];
  };
  "/my/problems/{problem_nm}/{problem_id}/zip": {
    /**
     * Problems Zip View
     * @description Returns ZIP file of the requested problem
     */
    get: operations["problems_zip_view_my_problems__problem_nm___problem_id__zip_get"];
  };
  "/my/submissions": {
    /** All Submissions View */
    get: operations["all_submissions_view_my_submissions_get"];
  };
  "/my/submissions/{problem_nm}": {
    /** Absproblems Submissions View */
    get: operations["absproblems_submissions_view_my_submissions__problem_nm__get"];
  };
  "/my/submissions/{problem_nm}/{problem_id}": {
    /** Problems Submissions View */
    get: operations["problems_submissions_view_my_submissions__problem_nm___problem_id__get"];
  };
  "/my/submissions/{problem_nm}/{problem_id}/submit": {
    /**
     * Submit View
     * @description **Perform a submission.**
     *
     * The source file must be given in code_b64 encoded with base64.
     *
     * Example:
     *
     * ```
     * http -A bearer -a $TOKEN POST $ADDR/submissions/P68688/P68688_ca/submit compiler_id=GCC annotation="My new shiny submission ✨" code_b64=$(base64 < P68688.c)`'
     * ```
     */
    post: operations["submit_view_my_submissions__problem_nm___problem_id__submit_post"];
  };
  "/my/submissions/{problem_nm}/{problem_id}/{submission_id}": {
    /** Problem Submission View */
    get: operations["problem_submission_view_my_submissions__problem_nm___problem_id___submission_id__get"];
  };
  "/my/submissions/{problem_nm}/{problem_id}/{submission_id}/extras": {
    /** Problem Submission Extras View */
    get: operations["problem_submission_extras_view_my_submissions__problem_nm___problem_id___submission_id__extras_get"];
  };
  "/my/submissions/{problem_nm}/{problem_id}/{submission_id}/certificate": {
    /** Problem Submission Certificate View Tbd */
    get: operations["problem_submission_certificate_view_TBD_my_submissions__problem_nm___problem_id___submission_id__certificate_get"];
  };
  "/my/statuses": {
    /** Absproblem Status Index View */
    get: operations["absproblem_status_index_view_my_statuses_get"];
  };
  "/my/statuses/{problem_nm}": {
    /** Absproblem Status Detail View */
    get: operations["absproblem_status_detail_view_my_statuses__problem_nm__get"];
  };
  "/my/statuses/{problem_nm}/{problem_id}": {
    /** Problem Status Detail View */
    get: operations["problem_status_detail_view_my_statuses__problem_nm___problem_id__get"];
  };
  "/my/awards": {
    /** Awards View */
    get: operations["awards_view_my_awards_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** AbstractProblemExtrasOut */
    AbstractProblemExtrasOut: {
      /** Ac Proglangs */
      ac_proglangs: string[];
      /** Tags */
      tags: string[];
    };
    /** AbstractProblemOut */
    AbstractProblemOut: {
      /** Problem Nm */
      problem_nm: string;
      /** Author */
      author?: string;
      /** Author Email */
      author_email?: string;
      /** Public */
      public: boolean;
      /** Official */
      official: boolean;
      /** Compilers */
      compilers?: string;
      /** Deprecation */
      deprecation?: string;
      /** Type */
      type: string;
      owner: components["schemas"]["PublicProfileOut"];
    };
    /** AbstractProblemStatusOut */
    AbstractProblemStatusOut: {
      /** Problem Nm */
      problem_nm: string;
      /** Nb Submissions */
      nb_submissions: number;
      /** Nb Pending Submissions */
      nb_pending_submissions: number;
      /** Nb Accepted Submissions */
      nb_accepted_submissions: number;
      /** Nb Rejected Submissions */
      nb_rejected_submissions: number;
      /** Nb Scored Submissions */
      nb_scored_submissions: number;
      /** Status */
      status: string;
    };
    /** AbstractProblemStatusWithProblemsOut */
    AbstractProblemStatusWithProblemsOut: {
      /** Problem Nm */
      problem_nm: string;
      /** Nb Submissions */
      nb_submissions: number;
      /** Nb Pending Submissions */
      nb_pending_submissions: number;
      /** Nb Accepted Submissions */
      nb_accepted_submissions: number;
      /** Nb Rejected Submissions */
      nb_rejected_submissions: number;
      /** Nb Scored Submissions */
      nb_scored_submissions: number;
      /** Status */
      status: string;
      /** Problems */
      problems: {
        [key: string]: components["schemas"]["ProblemStatusOut"] | undefined;
      };
    };
    /** AbstractProblemWithProblemsOut */
    AbstractProblemWithProblemsOut: {
      /** Problem Nm */
      problem_nm: string;
      /** Author */
      author?: string;
      /** Author Email */
      author_email?: string;
      /** Public */
      public: boolean;
      /** Official */
      official: boolean;
      /** Compilers */
      compilers?: string;
      /** Deprecation */
      deprecation?: string;
      /** Type */
      type: string;
      owner: components["schemas"]["PublicProfileOut"];
      /** Problems */
      problems: {
        [key: string]: components["schemas"]["ProblemOut"] | undefined;
      };
    };
    /** AwardOut */
    AwardOut: {
      /**
       * Time
       * Format: date-time
       */
      time: string;
      /** Type */
      type: string;
      /** Icon */
      icon: string;
      /** Title */
      title: string;
      /** Info */
      info: string;
      /** Youtube */
      youtube?: string;
    };
    /** Body_Request_authentication_token_auth_login_post */
    Body_Request_authentication_token_auth_login_post: {
      /** Grant Type */
      grant_type?: string;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope
       * @default
       */
      scope?: string;
      /** Client Id */
      client_id?: string;
      /** Client Secret */
      client_secret?: string;
    };
    /** Compiler */
    Compiler: {
      /** Compiler Id */
      compiler_id?: string;
      /** Name */
      name: string;
      /** Language */
      language: string;
      /** Extension */
      extension: string;
      /** Description */
      description?: string;
      /** Version */
      version?: string;
      /** Flags1 */
      flags1?: string;
      /** Flags2 */
      flags2?: string;
      /** Type */
      type?: string;
      /** Warning */
      warning?: string;
      /** Status */
      status?: string;
      /** Notes */
      notes?: string;
    };
    /** Country */
    Country: {
      /** Country Id */
      country_id?: string;
      /** Eng Name */
      eng_name: string;
    };
    /** CourseBaseOut */
    CourseBaseOut: {
      /** Course Nm */
      course_nm: string;
      /** Title */
      title?: string;
      /** Description */
      description?: string;
      /** Public */
      public: boolean;
      /** Official */
      official: boolean;
      owner: components["schemas"]["PublicProfileOut"];
    };
    /** CourseDetailOut */
    CourseDetailOut: {
      /** Course Nm */
      course_nm: string;
      /** Title */
      title?: string;
      /** Description */
      description?: string;
      /** Public */
      public: boolean;
      /** Official */
      official: boolean;
      owner: components["schemas"]["PublicProfileOut"];
      /** Tutors */
      tutors: components["schemas"]["PublicProfileOut"][];
      /** Lists */
      lists: components["schemas"]["ListBaseOut"][];
    };
    /** CredentialsOut */
    CredentialsOut: {
      /** Access Token */
      access_token: string;
      /** Token Type */
      token_type: string;
    };
    /** DashOut */
    DashOut: {
      /** Number Of Accepted Problems */
      number_of_accepted_problems: number;
      /** Number Of Rejected Problems */
      number_of_rejected_problems: number;
      /** Number Of Submissions */
      number_of_submissions: number;
      /** Level */
      level: string;
    };
    /** Driver */
    Driver: {
      /** Driver Id */
      driver_id?: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** Language */
    Language: {
      /** Language Id */
      language_id?: string;
      /** Eng Name */
      eng_name: string;
      /** Own Name */
      own_name: string;
    };
    /** ListBaseOut */
    ListBaseOut: {
      /** List Nm */
      list_nm: string;
      /** Title */
      title: string;
      /** Description */
      description?: string;
      /** Public */
      public: boolean;
      /** Official */
      official: boolean;
    };
    /** ListInfoOut */
    ListInfoOut: {
      /** List Nm */
      list_nm: string;
      /** Title */
      title: string;
      /** Description */
      description?: string;
      /** Public */
      public: boolean;
      /** Official */
      official: boolean;
      /** Items */
      items: components["schemas"]["ListItemOut"][];
    };
    /** ListItemOut */
    ListItemOut: {
      /** Problem Nm */
      problem_nm?: string;
      /** Description */
      description?: string;
    };
    /** ProblemExtrasOut */
    ProblemExtrasOut: {
      /** Official Checks */
      official_checks: {
        [key: string]: boolean | undefined;
      };
      /** Ac Proglangs */
      ac_proglangs: string[];
    };
    /** ProblemOut */
    ProblemOut: {
      /** Problem Id */
      problem_id: string;
      /** Problem Nm */
      problem_nm: string;
      /** Language Id */
      language_id: string;
      /** Title */
      title: string;
      /** Original Language Id */
      original_language_id: string;
      /** Translator */
      translator?: string;
      /** Translator Email */
      translator_email?: string;
      /** Checked */
      checked?: boolean;
    };
    /** ProblemOutWithAbstract */
    ProblemOutWithAbstract: {
      /** Problem Id */
      problem_id: string;
      /** Problem Nm */
      problem_nm: string;
      /** Language Id */
      language_id: string;
      /** Title */
      title: string;
      /** Original Language Id */
      original_language_id: string;
      /** Translator */
      translator?: string;
      /** Translator Email */
      translator_email?: string;
      /** Checked */
      checked?: boolean;
      abstract: components["schemas"]["AbstractProblemOut"];
    };
    /** ProblemStatusOut */
    ProblemStatusOut: {
      /** Problem Id */
      problem_id: string;
      /** Problem Nm */
      problem_nm: string;
      /** Nb Submissions */
      nb_submissions: number;
      /** Nb Pending Submissions */
      nb_pending_submissions: number;
      /** Nb Accepted Submissions */
      nb_accepted_submissions: number;
      /** Nb Rejected Submissions */
      nb_rejected_submissions: number;
      /** Nb Scored Submissions */
      nb_scored_submissions: number;
      /** Status */
      status: string;
    };
    /** ProblemStatusWithAbstractOut */
    ProblemStatusWithAbstractOut: {
      /** Problem Id */
      problem_id: string;
      /** Problem Nm */
      problem_nm: string;
      /** Nb Submissions */
      nb_submissions: number;
      /** Nb Pending Submissions */
      nb_pending_submissions: number;
      /** Nb Accepted Submissions */
      nb_accepted_submissions: number;
      /** Nb Rejected Submissions */
      nb_rejected_submissions: number;
      /** Nb Scored Submissions */
      nb_scored_submissions: number;
      /** Status */
      status: string;
      abstract: components["schemas"]["AbstractProblemStatusOut"];
    };
    /** ProfileOut */
    ProfileOut: {
      /** Email */
      email: string;
      /** Name */
      name: string;
      /** Username */
      username?: string;
      /** Nickname */
      nickname: string;
      /** Webpage */
      webpage?: string;
      /** Description */
      description?: string;
      /** Affiliation */
      affiliation?: string;
      /** Birth Year */
      birth_year: number;
      /** Max Subsxhour */
      max_subsxhour: number;
      /** Max Subsxday */
      max_subsxday: number;
      /** Administrator */
      administrator: boolean;
      /** Instructor */
      instructor: boolean;
      /** Parent Email */
      parent_email?: string;
      /** Country Id */
      country_id: string;
      /** Timezone Id */
      timezone_id: string;
      /** Compiler Id */
      compiler_id: string;
      /** Language Id */
      language_id: string;
    };
    /** Proglang */
    Proglang: {
      /** Proglang Id */
      proglang_id: string;
    };
    /** PublicProfileOut */
    PublicProfileOut: {
      /** Email */
      email: string;
      /** Name */
      name: string;
      /** Username */
      username?: string;
    };
    /** StatisticsHomeOut */
    StatisticsHomeOut: {
      /** Number Of Users */
      number_of_users: number;
      /** Number Of Problems */
      number_of_problems: number;
      /** Number Of Submissions */
      number_of_submissions: number;
      /** Number Of Exams */
      number_of_exams: number;
    };
    /** SubmissionExtrasOut */
    SubmissionExtrasOut: {
      /** Code B64 */
      code_b64: string;
      /** Public Testcases */
      public_testcases: components["schemas"]["SubmissionTestcaseOut"][];
    };
    /** SubmissionOut */
    SubmissionOut: {
      /** Problem Id */
      problem_id: string;
      /** Submission Id */
      submission_id: string;
      /** Compiler Id */
      compiler_id: string;
      /** Annotation */
      annotation?: string;
      /** State */
      state: string;
      /**
       * Time In
       * Format: date-time
       */
      time_in: string;
      /**
       * Time Out
       * Format: date-time
       */
      time_out?: string;
      /**
       * Time Beg
       * Format: date-time
       */
      time_beg?: string;
      /** Veredict */
      veredict?: string;
      /** Veredict Info */
      veredict_info?: string;
      /** Veredict Publics */
      veredict_publics?: string;
      /** Ok Publics But Wrong */
      ok_publics_but_wrong: boolean;
      /** Player Name */
      player_name?: string;
      /** Score */
      score?: string;
    };
    /** SubmissionPostIn */
    SubmissionPostIn: {
      /** Compiler Id */
      compiler_id: string;
      /** Annotation */
      annotation: string;
      /** Code B64 */
      code_b64: string;
    };
    /** SubmissionPostOut */
    SubmissionPostOut: {
      /** Submission Id */
      submission_id: string;
    };
    /** SubmissionTestcaseOut */
    SubmissionTestcaseOut: {
      /** Name */
      name: string;
      /** Input B64 */
      input_b64: string;
      /** Output B64 */
      output_b64: string;
      /** Correct B64 */
      correct_b64: string;
      /** Execution */
      execution: string;
      /** Verdict */
      verdict: string;
    };
    /** Success */
    Success: {
      /**
       * Success
       * @default true
       */
      success?: boolean;
    };
    /** TablesOut */
    TablesOut: {
      /** Compilers */
      compilers: {
        [key: string]: components["schemas"]["Compiler"] | undefined;
      };
      /** Countries */
      countries: {
        [key: string]: components["schemas"]["Country"] | undefined;
      };
      /** Drivers */
      drivers: {
        [key: string]: components["schemas"]["Driver"] | undefined;
      };
      /** Languages */
      languages: {
        [key: string]: components["schemas"]["Language"] | undefined;
      };
      /** Timezones */
      timezones: {
        [key: string]: components["schemas"]["Timezone"] | undefined;
      };
      /** Translations */
      translations: {
        [key: string]: components["schemas"]["Translation"] | undefined;
      };
      /** Verdicts */
      verdicts: {
        [key: string]: components["schemas"]["Verdict"] | undefined;
      };
      /** Proglangs */
      proglangs: components["schemas"]["Proglang"][];
    };
    /** Testcase */
    Testcase: {
      /** Name */
      name: string;
      /** Input B64 */
      input_b64: string;
      /** Correct B64 */
      correct_b64: string;
    };
    /** Time */
    Time: {
      /** Full Time */
      full_time: string;
      /** Int Timestamp */
      int_timestamp: number;
      /** Float Timestamp */
      float_timestamp: number;
      /** Time */
      time: string;
      /** Date */
      date: string;
    };
    /** Timezone */
    Timezone: {
      /** Timezone Id */
      timezone_id?: string;
    };
    /**
     * Translation
     * @description The meaning of this class is lost in time...
     */
    Translation: {
      /** Translation Id */
      translation_id?: string;
      /** Eng Name */
      eng_name: string;
      /** Own Name */
      own_name: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** Verdict */
    Verdict: {
      /** Verdict Id */
      verdict_id?: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
  root_view__get: {
    /** Root View */
    parameters?: {
      header?: {
        accept?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  ping_view_ping_get: {
    /** Ping View */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  do_not_try_view_do_not_try_get: {
    /** Do Not Try View */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  get_time_time_get: {
    /** Get Time */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Time"];
        };
      };
    };
  };
  Request_authentication_token_auth_login_post: {
    /**
     * Request Authentication Token
     * @description **Request an authentication token to be used in authenticated routes.**
     *
     * Httpie example:
     *
     * ```
     * http --form $ADDR/auth/login username=user@example.com password=mysecret
     * ```
     *
     * Under [`/docs`](/docs) you can also get the token clicking on the lock sign.
     *
     * You can set the returned token to an environment variable with `jq`:
     *
     * ```
     * export TOKEN=$(http --form $ADDR/auth/login username=user@example.com password=mysecret | jq -r .access_token)
     * ```
     *
     * After getting the token, you should use Bearer Token authentication.
     *
     * Httpie example:
     *
     * ```
     * http -A bearer -a $TOKEN $ADDR/my/profile
     * ```
     *
     * The token will expire after some hours.
     *
     * Note: While API is in dev, only admins and allowed users can log in.
     */
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_Request_authentication_token_auth_login_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CredentialsOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  Discard_authentication_token_auth_logout_post: {
    /**
     * Discard Authentication Token
     * @description **Discard an authentication token.**
     *
     * Httpie example: `http -A bearer -a $TOKEN POST $ADDR/auth/logout`
     */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Success"];
        };
      };
    };
  };
  Get_all_compilers__countries__drivers__languages__proglangs__timezones__translations_and_verdicts_tables_get: {
    /**
     * Get All Compilers, Countries, Drivers, Languages, Proglangs, Timezones, Translations And Verdicts
     * @description _viewProvides access to compilers, countries, drivers, languages, proglangs, timezones, translations and verdicts in a single request. This data does not change often, so you should only request it once per session.
     */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TablesOut"];
        };
      };
    };
  };
  Get_all_countries_tables_countries_get: {
    /** Get All Countries */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: components["schemas"]["Country"] | undefined;
          };
        };
      };
    };
  };
  Get_details_of_a_country_tables_countries__country_id__get: {
    /** Get Details Of A Country */
    parameters: {
      path: {
        country_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Country"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  Get_all_compilers_tables_compilers_get: {
    /** Get All Compilers */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: components["schemas"]["Compiler"] | undefined;
          };
        };
      };
    };
  };
  Get_details_of_a_compiler_tables_compilers__compiler_id__get: {
    /** Get Details Of A Compiler */
    parameters: {
      path: {
        compiler_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Compiler"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  Get_all_drivers_tables_drivers_get: {
    /** Get All Drivers */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: components["schemas"]["Driver"] | undefined;
          };
        };
      };
    };
  };
  Get_details_of_a_driver_tables_drivers__driver_id__get: {
    /** Get Details Of A Driver */
    parameters: {
      path: {
        driver_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Driver"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  Get_all_languages_tables_languages_get: {
    /** Get All Languages */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: components["schemas"]["Language"] | undefined;
          };
        };
      };
    };
  };
  Get_details_of_a_language_tables_languages__language_id__get: {
    /** Get Details Of A Language */
    parameters: {
      path: {
        language_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Language"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  Get_all_proglangs_tables_proglangs_get: {
    /** Get All Proglangs */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Proglang"][];
        };
      };
    };
  };
  Get_all_timezones_tables_timezones_get: {
    /** Get All Timezones */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: components["schemas"]["Timezone"] | undefined;
          };
        };
      };
    };
  };
  Get_details_of_a_timezone_tables_timezones__timezone_id__get: {
    /** Get Details Of A Timezone */
    parameters: {
      path: {
        timezone_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Timezone"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  Get_all_translations_tables_translations_get: {
    /** Get All Translations */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: components["schemas"]["Translation"] | undefined;
          };
        };
      };
    };
  };
  Get_details_of_a_translation_tables_translations__translation_id__get: {
    /** Get Details Of A Translation */
    parameters: {
      path: {
        translation_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Translation"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  Get_all_verdicts_tables_verdicts_get: {
    /** Get All Verdicts */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: components["schemas"]["Verdict"] | undefined;
          };
        };
      };
    };
  };
  Get_details_of_a_verdict_tables_verdicts__verdict_id__get: {
    /** Get Details Of A Verdict */
    parameters: {
      path: {
        verdict_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Verdict"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  statistics_home_view_statistics_home_get: {
    /** Statistics Home View */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StatisticsHomeOut"];
        };
      };
    };
  };
  profile_view_my_profile_get: {
    /** Profile View */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ProfileOut"];
        };
      };
    };
  };
  avatar_view_my_profile_avatar_get: {
    /** Avatar View */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  dashboard_view_my_profile_dashboard_get: {
    /** Dashboard View */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DashOut"];
        };
      };
    };
  };
  statistics_view_TBD_my_profile_statistics_get: {
    /** Statistics View Tbd */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  all_submissions_view_TBD_my_profile_all_submissions_get: {
    /** All Submissions View Tbd */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  courses_index_view_my_courses__get: {
    /** Courses Index View */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]:
              | {
                  [key: string]:
                    | components["schemas"]["CourseBaseOut"]
                    | undefined;
                }
              | undefined;
          };
        };
      };
    };
  };
  courses_available_index_view_my_courses_available_get: {
    /** Courses Available Index View */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: components["schemas"]["CourseBaseOut"] | undefined;
          };
        };
      };
    };
  };
  courses_available_detail_view_my_courses_available__username___course_nm__get: {
    /** Courses Available Detail View */
    parameters: {
      path: {
        username: string;
        course_nm: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CourseDetailOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  courses_available_enroll_view_my_courses_available__username___course_nm__enroll_post: {
    /** Courses Available Enroll View */
    parameters: {
      path: {
        username: string;
        course_nm: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Success"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  courses_enrolled_index_view_my_courses_enrolled_get: {
    /** Courses Enrolled Index View */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: components["schemas"]["CourseBaseOut"] | undefined;
          };
        };
      };
    };
  };
  courses_enrolled_detail_view_my_courses_enrolled__username___course_nm__get: {
    /** Courses Enrolled Detail View */
    parameters: {
      path: {
        username: string;
        course_nm: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CourseDetailOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  courses_enrolled_unenroll_view_my_courses_enrolled__username___course_nm__unenroll_post: {
    /** Courses Enrolled Unenroll View */
    parameters: {
      path: {
        username: string;
        course_nm: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Success"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  lists_index_view_my_lists_get: {
    /** Lists Index View */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: components["schemas"]["ListBaseOut"] | undefined;
          };
        };
      };
    };
  };
  lists_detail_view_my_lists__username___list_nm__get: {
    /** Lists Detail View */
    parameters: {
      path: {
        username: string;
        list_nm: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ListInfoOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  absproblems_index_view_my_problems_get: {
    /**
     * Absproblems Index View
     * @description Returns dictionary of all accessible abstract problems with their problems.
     */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]:
              | components["schemas"]["AbstractProblemWithProblemsOut"]
              | undefined;
          };
        };
      };
    };
  };
  absproblems_detail_view_my_problems__problem_nm__get: {
    /**
     * Absproblems Detail View
     * @description Returns requested abstract problems with its problems and owner.
     */
    parameters: {
      path: {
        problem_nm: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AbstractProblemWithProblemsOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  absproblems_extras_view_my_problems__problem_nm__extras_get: {
    /**
     * Absproblems Extras View
     * @description Returns extra information for the abstract problem
     */
    parameters: {
      path: {
        problem_nm: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AbstractProblemExtrasOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  problems_detail_view_my_problems__problem_nm___problem_id__get: {
    /**
     * Problems Detail View
     * @description Returns requested problem with its abstract problem.
     */
    parameters: {
      path: {
        problem_nm: string;
        problem_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ProblemOutWithAbstract"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  problems_testcases_sample_view_my_problems__problem_nm___problem_id__testcases_sample_get: {
    /** Problems Testcases Sample View */
    parameters: {
      path: {
        problem_nm: string;
        problem_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Testcase"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  problems_testcases_public_view_my_problems__problem_nm___problem_id__testcases_public_get: {
    /** Problems Testcases Public View */
    parameters: {
      path: {
        problem_nm: string;
        problem_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Testcase"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  problems_extras_view_my_problems__problem_nm___problem_id__extras_get: {
    /** Problems Extras View */
    parameters: {
      path: {
        problem_nm: string;
        problem_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ProblemExtrasOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  problems_solutions_view_my_problems__problem_nm___problem_id__solutions_get: {
    /**
     * Problems Solutions View
     * @description Solutions can only be accessed by admins
     */
    parameters: {
      path: {
        problem_nm: string;
        problem_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  problems_solutions_detail_view_my_problems__problem_nm___problem_id__solutions__prolang__get: {
    /**
     * Problems Solutions Detail View
     * @description Solutions can only be accessed by admins
     */
    parameters: {
      path: {
        problem_nm: string;
        problem_id: string;
        prolang: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  problems_html_view_my_problems__problem_nm___problem_id__html_get: {
    /**
     * Problems Html View
     * @description Returns HTLM statement of the requested problem
     */
    parameters: {
      path: {
        problem_nm: string;
        problem_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  problems_text_view_my_problems__problem_nm___problem_id__text_get: {
    /**
     * Problems Text View
     * @description Returns TXT statement of the requested problem
     */
    parameters: {
      path: {
        problem_nm: string;
        problem_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  problems_markdown_view_my_problems__problem_nm___problem_id__markdown_get: {
    /**
     * Problems Markdown View
     * @description Returns MD statement of the requested problem
     */
    parameters: {
      path: {
        problem_nm: string;
        problem_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  problems_pdf_view_my_problems__problem_nm___problem_id__pdf_get: {
    /**
     * Problems Pdf View
     * @description Returns PDF statement of the requested problem
     */
    parameters: {
      path: {
        problem_nm: string;
        problem_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  problems_zip_view_my_problems__problem_nm___problem_id__zip_get: {
    /**
     * Problems Zip View
     * @description Returns ZIP file of the requested problem
     */
    parameters: {
      path: {
        problem_nm: string;
        problem_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  all_submissions_view_my_submissions_get: {
    /** All Submissions View */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SubmissionOut"][];
        };
      };
    };
  };
  absproblems_submissions_view_my_submissions__problem_nm__get: {
    /** Absproblems Submissions View */
    parameters: {
      path: {
        problem_nm: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SubmissionOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  problems_submissions_view_my_submissions__problem_nm___problem_id__get: {
    /** Problems Submissions View */
    parameters: {
      path: {
        problem_nm: string;
        problem_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SubmissionOut"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  submit_view_my_submissions__problem_nm___problem_id__submit_post: {
    /**
     * Submit View
     * @description **Perform a submission.**
     *
     * The source file must be given in code_b64 encoded with base64.
     *
     * Example:
     *
     * ```
     * http -A bearer -a $TOKEN POST $ADDR/submissions/P68688/P68688_ca/submit compiler_id=GCC annotation="My new shiny submission ✨" code_b64=$(base64 < P68688.c)`'
     * ```
     */
    parameters: {
      path: {
        problem_nm: string;
        problem_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmissionPostIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SubmissionPostOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  problem_submission_view_my_submissions__problem_nm___problem_id___submission_id__get: {
    /** Problem Submission View */
    parameters: {
      path: {
        problem_nm: string;
        problem_id: string;
        submission_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SubmissionOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  problem_submission_extras_view_my_submissions__problem_nm___problem_id___submission_id__extras_get: {
    /** Problem Submission Extras View */
    parameters: {
      path: {
        problem_nm: string;
        problem_id: string;
        submission_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SubmissionExtrasOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  problem_submission_certificate_view_TBD_my_submissions__problem_nm___problem_id___submission_id__certificate_get: {
    /** Problem Submission Certificate View Tbd */
    parameters: {
      path: {
        problem_nm: string;
        problem_id: string;
        submission_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  absproblem_status_index_view_my_statuses_get: {
    /** Absproblem Status Index View */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]:
              | components["schemas"]["AbstractProblemStatusWithProblemsOut"]
              | undefined;
          };
        };
      };
    };
  };
  absproblem_status_detail_view_my_statuses__problem_nm__get: {
    /** Absproblem Status Detail View */
    parameters: {
      path: {
        problem_nm: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AbstractProblemStatusWithProblemsOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  problem_status_detail_view_my_statuses__problem_nm___problem_id__get: {
    /** Problem Status Detail View */
    parameters: {
      path: {
        problem_nm: string;
        problem_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ProblemStatusWithAbstractOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  awards_view_my_awards_get: {
    /** Awards View */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AwardOut"][];
        };
      };
    };
  };
}
